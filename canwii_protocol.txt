CANWiiProtocol for module CANWii

1. Background

The purpose of this document is to explain how the interaction between the PIC and the ESP8266 works.
Originally the ESP8266 offers a verbose serial communication protocol based on AT commands. This protocol is not suitable for
communication among embbebed devices. In order to decrease the number of bytes used to send a command and receive a response from the ESP,
we developed the protocol explained in this document.

2. Glossary of terms

SOM=Start of Message
EOM=End of Message

3. Convention

The hexa numbers are written in the format of 0xsomething, ex: 0x2a.
The SDK used if the version 1.0.0

4. Basic functionality

The communication is done by serial port at the baud rate of 115200 bits per second. The ESP uart is configured to this rate.
Once the serial link is stablished the communication is done by using the following format:

<start of message><message code><action><parameters ... ><end of message>

The response follows the same, but the ESP will return either an OK message or an ERROR message at the end.
Those are a one byte message.
Before receiving the OK or ERROR other general messages can be sent. These messages contain status but are normally
considered failures.
These message are in the format:
<start of message><error indication><error id><parameter><end of message>

[OBS: I think this has to be improved to a standard error format message.]

To allow the proper identification of the messages the values between 0x00 and 0x0A are reserved. It means that when an integer between 0 an 9
need to be transmitted it should be send as a char in the ascii table: 0x30 to 0x39.


5. Messages and parameters

5.1. Extended configuration Message

This message is used to set the major ESP configurations for the the CANWII project. Basically it puts the ESP in AP mode and create a TCP server.

Code:0x29 CMD_MERG_CONFIG_AP_EXT
Format:<SOM><CMDID><=><CWMODE><DHCP_MODE><DHCP_ENABLED><SSID><,><PASSWORD><,><CHANNEL><WPA_MODE><MULTIPLE_CONNECTIONS><CREATE_TCP><PORT><EOM>
[OBS: CREATE_TCP, WPA_MODE, MULTIPLE_CONNECTIONS, DHCP_MODE and DHCP_ENABLED should be a internal default for this command]
Parameters: 14 parameters.
1. CMDID= 0x29
2. SETUP "="
3. CWMODE=Choose which mode the ESP should be.
4. DHCP_MODE= value 0=set ESP8266 softAP , 1=set ESP8266 station, 2=set both softAP and station
5. DHCP_ENABLED= value 0=enable, 1=disable
6. SSID=Name of the AP that will be announced. Max of 16 bytes (can be changed to max of 64 bytes).
7. ","
8.PASSWORD=Password of the AP. Max of 16 bytes (can be changed to max of 64 bytes).
9. ","
10. CHANNEL=Values of 0 to 9. These should be
11. WPA_MODE=indicates the security level of AP access. Values 0=no password needed,2=password needed-WPA_PSK,2=encrypted password-WPA2_PSK,4=WPA_WPA2_PSK
12. MULTIPLE_CONNECTIONS=indicate the esp to support multiple connections. Value 0=single connection or 1=multiple connections
13. CREATE_TCP=Create a tcp connection. Value 0=delete, 1=create.
14. PORT=tcp port. Value between 10 and 255. These values should be enough for canwii. If not we can add another byte to expand the port values.

Example:
The spaces between each parameter is just make the reading easier. There is no spaces when sending the message.
CANWII_SOH  CMD_MERG_AP_EXTENDED 0x3d 0x33 0x32 0x30 0x65 0x73 0x70 0x2c 0x31 0x32 0x33 0x2c 0x31 0x30 0x31 0x31 0x30 CANWII_EOH
or in ascii
CANWII_SOH  CMD_MERG_AP_EXTENDED = 3 2 0 esp , 123 , 1 0 1 1 0 CANWII_EOH

This message will put the esp in AP mode with name "esp" and password "123",support multiple connections, activate the dhcp and create a tcp server on the port 48 (0x30).
The hexadecimal message would be:
01293d3332306573702c3132332c313031313004

If the message is successfull processed the esp does a restart.


5.2. Basic configuration Message

This message is used to set the major ESP configurations for the the CANWII project. Basically, like the 5.1 message, it puts the ESP in AP mode and create a TCP server. The differece is that it sets
some parameters to default values internally.

Code:0x30 CMD_MERG_CONFIG_AP
Format:<SOM><CMDID><=><SSID><,><PASSWORD><,><CHANNEL><WPA_MODE><PORT><EOM>
[OBS: CREATE_TCP, WPA_MODE, MULTIPLE_CONNECTIONS, DHCP_MODE and DHCP_ENABLED should be a internal default for this command]
Parameters: 9 parameters.
1. CMDID= 0x30
2. SETUP "="
3. SSID=Name of the AP that will be announced. Max of 16 bytes (can be changed to max of 64 bytes).
4. ","
5.PASSWORD=Password of the AP. Max of 16 bytes (can be changed to max of 64 bytes).
6. ","
7. CHANNEL=Values of 0 to 9. These should be
8. WPA_MODE=indicates the security level of AP access. Values 0=no password needed,2=password needed-WPA_PSK,2=encrypted password-WPA2_PSK,4=WPA_WPA2_PSK
9. PORT=tcp port. Value between 10 and 255. These values should be enough for canwii. If not we can add another byte to expand the port values.

Example:
The spaces between each parameter is just make the reading easier. There is no spaces when sending the message.
CANWII_SOH  CMD_MERG_AP 0x3d 0x65 0x73 0x70 0x2c 0x31 0x32 0x33 0x2c 0x31 0x30 0x30 CANWII_EOH
or in ascii
CANWII_SOH  CMD_MERG_AP = esp , 123 , 1 0 0 CANWII_EOH

This message will put the esp in AP mode with name "esp" and password "123",support multiple connections, activate the dhcp and create a tcp server on the port 48 (0x30).
The hexadecimal message would be:
01303d6573702c3132332c31303004


If the message is successfull processed the esp does a restart.

5.3. Receive TCP data from client message

This message is sent by the ESP to the serial port whenever it receives a valid TCP message.

Code:0x28 CMD_IPD
Format:<SOM><CMDID><LINK_ID><LEN><LEN><TCP MESSAGE><EOM>
Parameters:4
1. CMDID=0x28
2. Link ID. In case of single connection mode this value is 0xff
3. Length: Message length in 2 bytes (unsigned short).
4. Message: ascii tcp message
Example:

5.4. AT messages

The other messages follow the AT schema with the format:
<start of message><message code><action><parameters ... ><end of message>.
For more information see the ESP8266 AT Commands.

5.4.1. Config AT

Setup action
Code:0x0a CMD_ATE
Format:<SOM><CMDID><ACTION><ECHO><EOM>
Parameters:3
1. CMDID=0x0a
2. ACTION = '='
3. ECHO = value 0=unset echo 1= set echo

Return
OK = CANWII_OK or ERROR=CANWII_ERR

5.4.2 Reset the unit

Code:0x0b CMD_RST
Format:<SOM><CMDID><EOM>
Parameters:3
1. CMDID=CMD_RST

Return
OK = CANWII_OK

5.4.3 Return the Version

Code:0x0c CMD_GMR
Format:<SOM><CMDID><EOM>
Parameters:3
1. CMDID=CMD_GMR

Return version followed by
OK = CANWII_OK

5.4.4 Deep sleep

Code:0x0d CMD_GSLP
Format:<SOM><CMDID><EOM>
Parameters:3
1. CMDID=CMD_GSLP

Return version followed by
OK = CANWII_OK

5.4.5 Set baud rate

Code:0x0e CMD_IPR
Format:<SOM><CMDID><BAUD><EOM>
Parameters:2
1. CMDID=CMD_IPR
2. BAUD= 0 ... x

Return version followed by
OK = CANWII_OK or ERROR=CANWII_ERR

5.4.6

5.4.7

5.4.8

5.4.9


7. Constants

CMD_ATE         0x0a
CMD_RST         0x0b
CMD_GMR         0x0c
CMD_GSLP        0x0d
CMD_IPR         0x0e
CMD_CWMODE      0x0f
CMD_CWJAP       0x10
CMD_CWLAP       0x11
CMD_CWQAP       0x12
CMD_CWSAP       0x13
CMD_CWLIF       0x14
CMD_CWDHCP      0x15
CMD_CIFSR       0x16
CMD_CIPSTAMAC   0x17
CMD_CIPAPMAC    0x18
CMD_CIPSTA      0x19
CMD_CIPAP       0x1a
CMD_CIPSTATUS   0x1b
CMD_CIPSTART    0x1c
CMD_CIPCLOSE    0x1d
CMD_CIPSEND     0x1e
CMD_CIPMUX      0x1f
CMD_CIPSERVER   0x20
CMD_CIPMODE     0x21
CMD_CIPSTO      0x22
CMD_CIUPDATE    0x23
CMD_CIPING      0x24
CMD_CIPAPPUP    0x25
CMD_ATE         0x26
CMD_MPINFO      0x27
CMD_IPD         0x28
CMD_MERG_AP_EX  0x29
CMD_MERG_AP     0x30

Actions

CMD_QUERY '?'
CMD_EQUAL '='
CMD_TEST '!'

Responses

RSP_CONNECTED 0xA1
RSP_DISCONNECTED 0xA2
RSP_OK 0xA3
RSP_TCP_ERROR 0xA4
RSP_IP_ERROR 0xA5
RSP_NOAP 0xA6
RSP_FAIL_CONNECT 0xA7
RSP_MISS_PARAM_ERROR 0xA8
RSP_CLOSED 0xA9
RSP_SENT 0xAA
RSP_DNS_FAIL 0xAB
RSP_NOID_ERROR 0xAC
RSP_LINK_TYPE_ERROR 0xAD
RSP_BUSY_PROCESSING 0xAE
RSP_BUSY_SENDING 0xAF

Message specific codes
CANWII_SOH 0x01
CANWII_EOH 0x04
CANWII_OK 0x02
CANWII_ERR 0x03
CANWII_STR_SEP ','
CANWII_VERSION 0x01
CANWII_ON 0x01 //not used
CANWII_OFF 0x00 //not used
CANWII_TE_ERR //not used
CANWII_TCP 1 //not used
CANWII_UDP 0 //not used

//Error codes
CANWII_ERR_FAIL_CONFIG
CANWII_ERR_BUSY

8. Issues

    8.1. Strange messages when booting.
    8.2. More tests to avoid the restart when doing configuration.
    8.3. Create standard error message format
    8.4. Remote update using the serial port or wifi.
